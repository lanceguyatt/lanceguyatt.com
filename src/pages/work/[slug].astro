---
import { getCollection, type CollectionEntry, getEntries } from 'astro:content'
import { Image } from 'astro:assets'

import { SITE } from '@config'
import Workbench from '~/layouts/Workbench.astro'
import Window from '~/components/Window.astro'
import { Button } from '~/components/ui/button'
// import Image from '~/components/Image.astro'
import Work from '~/containers/Work.astro'
import Prose from '~/components/Prose.astro'

export async function getStaticPaths() {
  const entries = await getCollection('work')

  return entries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry }
  }))
}

type Props = {
  entry: CollectionEntry<'work'>
}

const { entry } = Astro.props
const { Content } = await entry.render()
const { data, id } = entry
const { name, description, image, tags, url, sameAs } = data

const title = `${name} - Work - ${SITE.name}`
// const url = `work/${id}`
// const keywords = tags.map(tag => tag)

let selectedTags = null
if (tags) selectedTags = await getEntries(tags)

const meta = { title, name, description, url, image }

const schema = {
  '@context': 'https://schema.org',
  '@type': 'WebPage',
  name,
  description,
  url: `${SITE.url}/work/${id}`,
  // image: {
  //   '@type': 'ImageObject',
  //   url: `${SITE.url}${image.url}`,
  //   width: image.width,
  //   height: image.height,
  //   description: image.alt
  // },
  breadcrumb: {
    '@type': 'BreadcrumbList',
    itemListElement: [
      {
        '@type': 'ListItem',
        position: 1,
        item: {
          '@id': `${SITE.url}`,
          name: 'Workbench'
        }
      },
      {
        '@type': 'ListItem',
        position: 2,
        item: {
          '@id': `${SITE.url}/work`,
          name: 'Work'
        }
      },
      {
        '@type': 'ListItem',
        position: 3,
        item: {
          '@id': `${SITE.url}/work/${id}`,
          name
        }
      }
    ]
  },
  mainEntity: {
    '@type': 'CreativeWork',
    name,
    url: `${SITE.url}/work/${id}`,
    sameAs,
    // image: {
    //   '@type': 'ImageObject',
    //   url: `${SITE.url}${image.url}`,
    //   width: image.width,
    //   height: image.height,
    //   description: image.alt
    // },
    // keywords,
    copyrightHolder: {
      '@type': 'Organization',
      name
    }
  },
  copyrightHolder: {
    '@type': 'Person',
    name: 'Lance Guyatt'
  },
  copyrightYear: SITE.copyrightYear
}
---

<Workbench {...meta}>
  <script
    type="application/ld+json"
    set:html={JSON.stringify(schema, null, 2)}
    slot="head"
  />
  <Window
    id={`window-${id}`}
    name={name}
    url="/work"
    active
    level={2}
    depth
    zoom
  >
    <div class="flex h-full bg-red-50 flex-col gap-6">
      {
        image && (
          <div class="h-36 w-36 self-center">
            <div class="aspect-square">
              <Image
                src={image}
                alt=""
                class="border-img-bar object-cover p-2px"
              />
            </div>
          </div>
        )
      }

      <dl class="grid max-w-160 gap-3 sm:grid-cols-[1fr_11fr]">
        <dt
          class="flex items-center text-foreground after:content-[':'] sm:justify-end"
        >
          Name
        </dt>
        <dd class="border-img-foo p-2px">{name}</dd>
        {
          url && (
            <>
              <dt class="flex items-center text-foreground after:content-[':'] sm:justify-end">
                Url
              </dt>
              <dd class="border-img-foo p-2px">{url}</dd>
            </>
          )
        }
        {
          selectedTags && (
            <>
              <dt class="flex items-center text-foreground after:content-[':'] sm:justify-end">
                Technologies
              </dt>
              <dd class="border-img-foo p-2px">
                <ul>
                  {selectedTags.map(tag => (
                    <li>{tag.data.name}</li>
                  ))}
                </ul>
              </dd>
            </>
          )
        }
      </dl>

      {
        Content && (
          <div class="mx-auto grid max-w-[40rem] sm:grid-cols-[1fr_11fr] gap-3">
            <div />
            <Prose>
              <Content />
            </Prose>
          </div>
        )
      }

      <div class="flex justify-between mt-auto">
        <Button asChild>
          <a href="/work"> Cancel</a>
        </Button>
        {
          url && (
            <Button href={url} target="_blank" rel="noopener noreferrer">
              Launch
            </Button>
          )
        }
      </div>
    </div>
  </Window>

  <Window id="work" name="Work" level={1} depth zoom>
    <Work />
  </Window>
</Workbench>
